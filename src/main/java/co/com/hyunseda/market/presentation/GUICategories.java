/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package co.com.hyunseda.market.presentation;

import co.com.hyunseda.market.access.DataBaseManager;
import co.com.hyunseda.market.domain.Category;
import co.com.hyunseda.market.service.CategoryService;
import co.com.hyunseda.market.service.ICategoryService;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author earea
 */
public class GUICategories extends javax.swing.JDialog {
        //private final IProductService productService;
    private final ICategoryService categoryService;
    private boolean addOption;
    
    /**
     * Creates new form GUICategory
     * @param aThis
     * @param par
     * @param categoryService
     */
   
    public GUICategories(GUIProducts aThis, boolean par, ICategoryService categoryService) {
        initComponents();
        this.categoryService = categoryService;
        setLocationRelativeTo(null); // Centramos la ventana
        stateInitial();
    }


    
    private void initializeTable() {
        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Id", "Name"
                }
        ));
    }
    
    private void fillCategoryTable(List<Category> categories) {
        DefaultTableModel model = (DefaultTableModel) tblCategories.getModel();
        model.setRowCount(0); // Limpia la tabla antes de llenarla
        for (Category category : categories) {
            Object[] row = new Object[2];  // Asumiendo que tienes 2 columnas (ID y Nombre)
            row[0] = category.getCategoryId();
            row[1] = category.getName();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSouth = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnFind = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();
        pnlCenter = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCategory = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategories = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlSouth.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pnlSouth.setLayout(new java.awt.GridBagLayout());

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        pnlSouth.add(btnNuevo, new java.awt.GridBagConstraints());

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        pnlSouth.add(btnEditar, new java.awt.GridBagConstraints());

        btnSave.setText("Grabar");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        pnlSouth.add(btnSave, new java.awt.GridBagConstraints());

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        pnlSouth.add(btnCancelar, new java.awt.GridBagConstraints());

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        pnlSouth.add(btnEliminar, new java.awt.GridBagConstraints());

        btnFind.setText("Buscar");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });
        pnlSouth.add(btnFind, new java.awt.GridBagConstraints());

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        pnlSouth.add(btnCerrar, new java.awt.GridBagConstraints());

        pnlCenter.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlCenter.setLayout(new java.awt.GridLayout(3, 2));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("*Categoría: ");
        pnlCenter.add(jLabel1);

        txtCategory.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCategoryFocusLost(evt);
            }
        });
        pnlCenter.add(txtCategory);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Id: ");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlCenter.add(jLabel2);

        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });
        pnlCenter.add(txtId);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Tabla de Categorías: ");
        pnlCenter.add(jLabel3);

        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCategories);

        pnlCenter.add(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 742, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 34, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnlCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pnlSouth, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 35, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 369, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnlCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)
                    .addComponent(pnlSouth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        stateNew();
        txtCategory.requestFocus();
        addOption = true;
    }//GEN-LAST:event_btnNuevoActionPerformed
     
    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        addOption = false;
        stateEdit();
        txtCategory.requestFocus();
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (txtCategory.getText().trim().isEmpty()) {
            Messages.showMessageDialog("Debe ingresar el nombre de la categoría", "Atención");
            txtCategory.requestFocus();
            return;
        }
        if (addOption) {
            addCategory();
        } else {
            editCategory();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        stateInitial();
        cleanControls();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        String idText = txtId.getText().trim();
        if (idText.isEmpty()) {
            Messages.showMessageDialog("Debe ingresar un ID", "Atención");
            return;
        }
        Category category = categoryService.findCategoryById(Long.valueOf(idText)); 
        if (category == null) {
            Messages.showMessageDialog("La categoría no existe", "Error");
        } else {
            // Llenar la tabla con la categoría encontrada
            fillCategoryTable(List.of(category));  // List.of() crea una lista de un solo elemento
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void txtCategoryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCategoryFocusLost
        // Solo ejecutar si no estás en modo de añadir o editar
        if (!addOption && !txtId.getText().trim().isEmpty()) {
            String id = txtId.getText().trim();
            if (id.equals("")) {
                Messages.showMessageDialog("Debe buscar la categoría a eliminar", "Atención");
                txtId.requestFocus();
                return;
            }

            if (Messages.showConfirmDialog("¿Está seguro que desea eliminar esta categoría?", "Confirmación") == JOptionPane.YES_NO_OPTION) {
                if (categoryService.deleteCategory(Long.valueOf(id))) {
                    Messages.showMessageDialog("Categoría eliminada con éxito", "Atención");
                    stateInitial();
                    cleanControls();
                }
            }
        }
    }//GEN-LAST:event_txtCategoryFocusLost

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        Long id = Long.valueOf(txtId.getText().trim());
        Category category = categoryService.findCategoryById(id);
        if (category == null) {
            Messages.showMessageDialog("La categoría no existe", "Error");
            txtId.setText("");
            txtId.requestFocus();
        } else {
            txtCategory.setText(category.getName());
        }    // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        String id = txtId.getText().trim();
        if (id.isEmpty()) {
            Messages.showMessageDialog("Debe buscar la categoría a eliminar", "Atención");
            txtId.requestFocus();
            return;
        }

        Long categoryId = Long.valueOf(id);
        if (Messages.showConfirmDialog("¿Está seguro que desea eliminar esta categoría?", "Confirmación") == JOptionPane.YES_NO_OPTION) {
            if (categoryService.deleteCategory(categoryId)) {
                Messages.showMessageDialog("Categoría eliminada con éxito", "Atención");
                cleanControls();
                stateInitial();
            } else {
                Messages.showMessageDialog("Error al eliminar la categoría", "Error");
            }
        }   
    }//GEN-LAST:event_btnEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlSouth;
    private javax.swing.JTable tblCategories;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtId;
    // End of variables declaration//GEN-END:variables

    private void stateNew() {   
        btnSave.setVisible(true);
        btnCancelar.setVisible(true);
        btnNuevo.setVisible(false);
        btnEditar.setVisible(false);
        btnEliminar.setVisible(false);
        btnFind.setVisible(false);
        txtId.setEnabled(false);
        txtCategory.setEnabled(true);
    }
    private void stateEdit() {
        btnNuevo.setVisible(true);
        btnEditar.setVisible(true);
        btnEliminar.setVisible(true);
        btnCancelar.setVisible(true);
        btnCerrar.setVisible(true);
        btnSave.setVisible(true);
        btnFind.setVisible(false);
        txtCategory.setEnabled(true);
        txtId.setEnabled(false);      
    }
    private void stateInitial()    {
        btnNuevo.setVisible(true);
        btnEditar.setVisible(true);
        btnEliminar.setVisible(false);
        btnCancelar.setVisible(false);
        btnCerrar.setVisible(true);
        btnSave.setVisible(false);
        btnFind.setVisible(true);
        txtCategory.setEnabled(false);
        txtId.setEnabled(false);
    }   
    private void cleanControls() {
        txtCategory.setText("");
        txtId.setText("");
    }
    private void editCategory() {
        String id = txtId.getText().trim();
        if (id.equals("")) {
            Messages.showMessageDialog("Debe buscar la categoría a editar", "Atención");
            txtId.requestFocus();
            return;
        }

        Long categoryId = Long.valueOf(id);
        String name = txtCategory.getText().trim();

        // Crear el objeto Category
        Category category = new Category();
        category.setCategoryId(categoryId);
        category.setName(name);

        // Llamar al servicio de categoría para editar
        if (categoryService.editCategory(categoryId, category)) {
            Messages.showMessageDialog("Categoría editada con éxito", "Atención");
            cleanControls();
            stateInitial();
        } else {
            Messages.showMessageDialog("Error al editar la categoría", "Atención");
        }
    }
    private void addCategory() {
        // Crear el objeto Category
        Category category = new Category();
        category.setName(txtCategory.getText().trim());

        // Llamar al servicio para guardar la categoría
        if (categoryService.saveCategory(category)) {  // Si la categoría se guarda correctamente
            Messages.showMessageDialog("Categoría guardada con éxito", "Atención");
            cleanControls();
            stateInitial();  // Volver al estado inicial
        } else {
            Messages.showMessageDialog("Error al guardar la categoría", "Error");
        }
    }

}
